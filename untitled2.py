# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gJSjKtLXKZi0Xf6v7HxxEYG2QSoci3ex
"""

# Instale o pacote skfuzzy
!pip install scikit-fuzzy

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl


# Variáveis Linguísticas
temperatura = ctrl.Antecedent(np.arange(0,41,1), 'TEMPERATURA')
umidade_solo = ctrl.Antecedent(np.arange(0,101,1), 'UMIDADE_SOLO')
intensidade_luz = ctrl.Antecedent(np.arange(0,1001,1), 'INTENSIDADE_LUZ')
potencia_aquecedor = ctrl.Consequent(np.arange(0,101,1), 'POTENCIA_AQUECEDOR')


temperatura['FRIO'] = fuzz.trapmf(temperatura.universe, [0, 0, 10, 15])
temperatura['NORMAL'] = fuzz.trapmf(temperatura.universe, [10, 15, 25, 30])
temperatura['QUENTE'] = fuzz.trapmf(temperatura.universe, [25, 30, 40, 40])


umidade_solo['SECO'] = fuzz.trapmf(umidade_solo.universe, [0, 0, 20, 30])
umidade_solo['MODERADO'] = fuzz.trapmf(umidade_solo.universe, [20, 30, 50, 80])
umidade_solo['UMIDO'] = fuzz.trapmf(umidade_solo.universe, [50, 80, 100, 100])


intensidade_luz['FRACA'] = fuzz.trapmf(intensidade_luz.universe, [0, 0, 100, 320])
intensidade_luz['MODERADA'] = fuzz.trapmf(intensidade_luz.universe, [100, 320, 500, 700])
intensidade_luz['FORTE'] = fuzz.trapmf(intensidade_luz.universe, [500, 700, 1000, 1000])


potencia_aquecedor['DESLIGADO'] = fuzz.trapmf(potencia_aquecedor.universe, [0, 0, 0, 0])
potencia_aquecedor['ATIVO_BAIXO'] = fuzz.trapmf(potencia_aquecedor.universe, [0, 0, 20, 35])
potencia_aquecedor['ATIVO_MEDIO'] = fuzz.trapmf(potencia_aquecedor.universe, [20, 35, 50, 65])
potencia_aquecedor['ATIVO_ALTO'] = fuzz.trapmf(potencia_aquecedor.universe, [50, 65, 100, 100])

temperatura.view()
umidade_solo.view()
intensidade_luz.view()
potencia_aquecedor.view()

rule1 = ctrl.Rule(temperatura['QUENTE'] & umidade_solo['SECO'] & intensidade_luz['FORTE'], potencia_aquecedor['DESLIGADO'])
rule2 = ctrl.Rule(temperatura['NORMAL'] & umidade_solo['UMIDO'] & intensidade_luz['MODERADA'], potencia_aquecedor['ATIVO_BAIXO'])
rule3 = ctrl.Rule(temperatura['NORMAL'] & umidade_solo['MODERADO'] & intensidade_luz['MODERADA'], potencia_aquecedor['ATIVO_MEDIO'])
rule4 = ctrl.Rule(temperatura['FRIO'] & umidade_solo['SECO'] & intensidade_luz['FRACA'], potencia_aquecedor['ATIVO_ALTO'])

potencia_aquecedor_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4])
potencia_aquecedor_simulador = ctrl.ControlSystemSimulation(potencia_aquecedor_ctrl)

potencia_aquecedor_simulador.input['TEMPERATURA'] = 15
potencia_aquecedor_simulador.input['UMIDADE_SOLO'] = 70
potencia_aquecedor_simulador.input['INTENSIDADE_LUZ'] = 500

potencia_aquecedor_simulador.compute()

temperatura.view(sim=potencia_aquecedor_simulador)
umidade_solo.view(sim=potencia_aquecedor_simulador)
intensidade_luz.view(sim=potencia_aquecedor_simulador)
potencia_aquecedor.view(sim=potencia_aquecedor_simulador)

# Obter a saída defuzzificada
potencia_aquecedor_result = potencia_aquecedor_simulador.output['POTENCIA_AQUECEDOR']

print("Potência do Aquecedor:", potencia_aquecedor_result)